// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CARD should match the Card snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Button
    apiCall={[Function]}
    buttonTitle="Favorites"
    isActive={false}
    numFavorites={0}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "host",
    "props": Object {
      "children": <Link
        replace={false}
        to="/favorites"
>
        <button
                className="button button-inactive Favorites-button"
        >
                Favorites
                <span>
                         : 
                </span>
                0
        </button>
</Link>,
      "className": "button-wrapper",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": null,
      "nodeType": "class",
      "props": Object {
        "children": <button
          className="button button-inactive Favorites-button"
>
          Favorites
          <span>
                     : 
          </span>
          0
</button>,
        "replace": false,
        "to": "/favorites",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": null,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Favorites",
            <span>
               : 
</span>,
            0,
          ],
          "className": "button button-inactive Favorites-button",
        },
        "ref": null,
        "rendered": Array [
          "Favorites",
          Object {
            "instance": null,
            "key": null,
            "nodeType": "host",
            "props": Object {
              "children": " : ",
            },
            "ref": null,
            "rendered": " : ",
            "type": "span",
          },
          0,
        ],
        "type": "button",
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": <Link
          replace={false}
          to="/favorites"
>
          <button
                    className="button button-inactive Favorites-button"
          >
                    Favorites
                    <span>
                               : 
                    </span>
                    0
          </button>
</Link>,
        "className": "button-wrapper",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": <button
            className="button button-inactive Favorites-button"
>
            Favorites
            <span>
                         : 
            </span>
            0
</button>,
          "replace": false,
          "to": "/favorites",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": null,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Favorites",
              <span>
                 : 
</span>,
              0,
            ],
            "className": "button button-inactive Favorites-button",
          },
          "ref": null,
          "rendered": Array [
            "Favorites",
            Object {
              "instance": null,
              "key": null,
              "nodeType": "host",
              "props": Object {
                "children": " : ",
              },
              "ref": null,
              "rendered": " : ",
              "type": "span",
            },
            0,
          ],
          "type": "button",
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
